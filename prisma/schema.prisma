// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model Object {
  id                Int                @id @default(autoincrement())
  slug              String
  image             String?
  title             String
  subtitle          String?
  description       String
  details           Detail[]
  frequentQuestions FrequentQuestion[]
  createdAt         DateTime           @default(now())
  reviews           Review[]
}

model FrequentQuestion {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  object   Object @relation(fields: [objectId], references: [id])
  objectId Int
}

model Detail {
  id       Int    @id @default(autoincrement())
  key      String
  value    String
  object   Object @relation(fields: [objectId], references: [id])
  objectId Int
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  rents         Rent[]
  reviews       Review[]
  rentsBookings RentBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rent {
  id            Int           @id @default(autoincrement())
  name          String
  price         Float
  profile_photo String
  slug          String
  department    String
  city          String?
  host          User          @relation(fields: [hostId], references: [id])
  hostId        Int
  description   String
  reviews       Review[]
  collection    String[]
  services      Service[]
  rules         String[]
  bookings      RentBooking[]
  type          RentType      @default(HOTEL)
  rooms         Room[]
  capacity      Int? // In case is a hotel, then ignore, since the room capacity will be the one.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id    Int     @id @default(autoincrement())
  icon  String?
  name  String
  rents Rent[]
  rooms Room[]
}

model Room {
  id          Int           @id @default(autoincrement())
  rent        Rent          @relation(fields: [rentId], references: [id])
  rentId      Int
  name        String
  single_bed  Int
  queen_bed   Int
  king_bed    Int
  capacity    Int // Maximum number of people: adults & kids are considered people not babies, therefore in case the # of guess surpasses the capacity, we should put a warning but still let the person make the booking.
  price       Float // Price per night
  description String? // Optional description
  amenities   Service[] // List of amenities (e.g., WiFi, TV, AC)
  photos      String[] // URLs to room photos
  rules       String[] // Specific rules for the room (e.g., no smoking)
  bookings    RentBooking[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RentType {
  HOTEL
  APARTMENT
  PENSION
}

model Review {
  id             Int      @id @default(autoincrement())
  rating         Float
  comment        String
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  reviewableId   Int // An integer field to store the ID of the entity being reviewed.
  reviewableType String // A string field to store the type of the entity being reviewed (e.g., "Object", "Rent").
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  object         Object?  @relation(fields: [objectId], references: [id])
  objectId       Int?
  rent           Rent?    @relation(fields: [rentId], references: [id])
  rentId         Int?
  // restaurant
  // restaurantId

  @@index([reviewableId, reviewableType])
}

model RentBooking {
  id     Int      @id @default(autoincrement())
  from   DateTime
  to     DateTime
  User   User?    @relation(fields: [userId], references: [id])
  userId Int?
  Rent   Rent    @relation(fields: [rentId], references: [id])
  rentId Int
  Room   Room?    @relation(fields: [roomId], references: [id])
  roomId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
